const { Resend } = require('resend')
const config = require('../config/config')
const logger = require('../config/logger')

let resend = null

function initialize() {
  if (config.email.resendApiKey) {
    resend = new Resend(config.email.resendApiKey)
    logger.info('‚úÖ Resend email service initialized')
  } else {
    logger.error('‚ùå Resend API key missing ‚Äî please set config.email.resendApiKey')
  }
}

/**
 * G·ª≠i email b·∫±ng Resend API
 * @param {string} email - ng∆∞·ªùi nh·∫≠n
 * @param {string} subject - ti√™u ƒë·ªÅ
 * @param {string} html - n·ªôi dung HTML
 */
async function send(email, subject, html) {
  if (!resend) {
    logger.error('‚ùå Resend service not initialized')
    throw new Error('Email service not configured')
  }

  try {
    const { data, error } = await resend.emails.send({
      from: config.email.from || 'Your App <onboarding@resend.dev>', // ‚úÖ fallback an to√†n
      to: email,
      subject,
      html
    })

    if (error) {
      logger.error(`‚ùå Failed to send email to ${email}: ${error.message}`)
      return { success: false, error: error.message }
    }

    logger.info(`‚úÖ Email sent to ${email}: ${data.id}`)
    return { success: true, messageId: data.id }

  } catch (err) {
    logger.error(`üî• Unexpected error sending email: ${err.stack}`)
    return { success: false, error: err.message }
  }
}

/**
 * Resend kh√¥ng c·∫ßn verify SMTP, nh∆∞ng ta log cho r√µ
 */
async function verifyConnection() {
  logger.info('‚ÑπÔ∏è Resend uses HTTPS API ‚Äî no SMTP verification needed')
  return true
}

initialize()

module.exports = {
  send,
  verifyConnection
}
